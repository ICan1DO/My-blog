<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>自学 on Trade0ff&#39;s Blog</title>
    <link>https://ICan1DO.github.io/my-blog/categories/%E8%87%AA%E5%AD%A6/</link>
    <description>Recent content in 自学 on Trade0ff&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 14 Mar 2021 17:14:03 +0000</lastBuildDate><atom:link href="https://ICan1DO.github.io/my-blog/categories/%E8%87%AA%E5%AD%A6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java集合</title>
      <link>https://ICan1DO.github.io/my-blog/p/post/</link>
      <pubDate>Sun, 14 Mar 2021 17:14:03 +0000</pubDate>
      
      <guid>https://ICan1DO.github.io/my-blog/p/post/</guid>
      <description>Java集合   Collection
集合接口层级的底层。Java平台并不提供任何对Collection接口的直接实现，但是提供更加详细的对子接口的实现，诸如Set和List接口。
//基本操作方法 size(); //返回集合中元素个数 isEmpty(); //判断集合是否为空 contains(); //是否包含某个元素 add(); //添加元素，成功返回True remove(); //移除元素 iterator(); //迭代器 hasNext(); //是有含有下一个元素，并且返回下一个元素  collection.removeAll(Collection.singleton()); //Collections.singleton是一个静态工厂方法，返回一个只包含指定元素的不可变的Set集合。例如Collections.Singleton(e)方法返回只包含元素e的Set集合，然后集合c调用removeAll方法删除c中所有元素e的实例。同样，Collections.Singleton(null)方法返回只包含元素null的Set集合，然后集合c调用removeAll方法删除c中所有null元素。  toArray(); //方法主要是作为集合和老的期望输入数组的API之间的桥梁。数组操作允许Collection中的内容被转换到一个数组中去   Set
不能包含重复元素的集合
  SortedSet
元素按升序排列的Set。
  HashSet
HashSet，将其元素存储在一个哈希表中，它具有最好的性能实现；然而它不保证迭代的顺序。
  TreeSet
TreeSet，将其元素存储在一个红黑树中，按元素的值顺序排列；本质上它比HashSet要慢。
  LinkedHashSet
LinkedHashSet，是作为一个哈希表实现的，用链表连接这些元素，按元素的插入顺序排列。
    List
一个有序的集合。List可以包含重复的元素，并且List中的元素是有序排列的。
  ArrayList
通常有较好的性能实现
  LinkedList
在一定条件下提供较好的执行性能
    Queue
是一个其元素带有先后处理顺序的集合。队列通常（但不是必需的）以一种FIFO（先进先出）的形式管理元素。
    Map</description>
    </item>
    
    <item>
      <title>JavaScript基础</title>
      <link>https://ICan1DO.github.io/my-blog/p/post/</link>
      <pubDate>Mon, 08 Mar 2021 13:33:03 +0000</pubDate>
      
      <guid>https://ICan1DO.github.io/my-blog/p/post/</guid>
      <description>JavaScript基础 数据类型  原始数据类型（基本数据类型）  number：数字。整数/小数/NaN（not a number） string：字符串 boolean：true/false null：false undefined：false   引用数据类型：对象  变量 var 变量名 = 初始化值;
typeof(变量名)：获取变量的数据类型
类型转换  number：0或NaN为false，其他为true string：“”为false，其他为true null：false undefined：false 对象：所有对象都为true  对象   Function方法对象
  创建方式
//形参不需要填写数据类型，返回值也可以省略 let fun1=new function(&amp;#34;a&amp;#34;,&amp;#34;b&amp;#34;,&amp;#34;alert(a+b)&amp;#34;); //第一种方式 function fun2(a,b){ alert(a+b); }; //第二种方式 let fun3=function fun(a,b){ alert(a+b); }; //第三种方式   重名及参数相同：方法重名且参数相同，方法会被覆盖。
  方法调用：方法调用只与方法的名称有关，和参数列表无关。
  传入参数：JS方法声明中有一个隐藏的内置对象（数组：arguments），封装所得的实际参数。
    Array数组对象
  创建方式</description>
    </item>
    
  </channel>
</rss>
